<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-01-11T08:33:52.001Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test1</title>
    <link href="http://example.com/2024/01/14/test/"/>
    <id>http://example.com/2024/01/14/test/</id>
    <published>2024-01-13T16:00:00.000Z</published>
    <updated>2024-01-11T08:33:52.001Z</updated>
    
    <content type="html"><![CDATA[<p>test</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;test&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JAVA的通信</title>
    <link href="http://example.com/2024/01/12/javaContect/"/>
    <id>http://example.com/2024/01/12/javaContect/</id>
    <published>2024-01-11T16:00:00.000Z</published>
    <updated>2024-01-11T08:34:33.188Z</updated>
    
    <content type="html"><![CDATA[<p>UDP（User Datagram Protocol）和TCP（Transmission Control Protocol）是两种常见的传输层协议，用于在计算机网络中实现数据传输。</p><ul><li><p>UDP通信(<em>数据包通信</em>)：<br>UDP是一种<strong>无连接的、不可靠的</strong>传输协议。它提供了一种简单的数据传输机制，适用于一些对数据可靠性要求较低、传输延迟较敏感的应用场景。<br>UDP通信常用于实时性要求较高的应用，如音频、视频等流媒体传输，以及一些需要快速发送短消息的应用。</p></li><li><p>TCP通信(<em>套接字</em>)：<br>TCP是一种面向连接的、可靠的传输协议。它提供了一种面向流的数据传输机制，适用于对数据可靠性要求较高的应用场景。TCP通信的特点包括：</p></li></ul><p>TCP通信适用于需要<strong>可靠传输</strong>的应用，如文件传输、Web浏览器与服务器的通信等。</p><p>其次是两个关键类的构建参数</p><ul><li><p>创建套接字（Socket）的API参数：</p><p>  IP地址：指定目标主机的IP地址，可以是IPv4或IPv6地址。（本机链接时可以省略IP）</p><p>  端口号：指定与套接字关联的端口号，用于标识应用程序的通信端口。</p><p>  即 <code>new Socket(String host, int port)</code>;</p></li><li><p>创建数据包（Packet）的API参数：</p><p>  数据：要发送的实际数据，通常以字节数组或字符串的形式提供。</p><p>  数据长度：数据的实际长度。</p><p>  IP地址：指定目标主机的IP地址，可以是IPv4或IPv6地址。</p><p>  端口号：指定与数据包关联的端口号，用于标识应用程序的通信端口。</p></li></ul><p><code>new DatagramPacket(byte[] buf, int length, InetAddress address, int port)</code></p><p>首先需要指出的是 客户端和服务端 都是 DatagramSocket[^DatagramSocket] 并不会因为服务端是一对多就不一样<br>客户端A发送一个DatagramPacket[^DatagramPacket] 服务端接收 并将其发送给除了A以外的其他客户端 </p><p>[^DatagramSocket]: 可以理解为一个邮局 Socket的意思是插座、基座 构建时</p><p>[^DatagramPacket]: 可以理解为一个信封 包含了出发地址 目标地址 数据 <code>DatagramPacket(sendData, sendData.length, serverAddress, port);</code></p>]]></content>
    
    
    <summary type="html">java组件通信</summary>
    
    
    
    
  </entry>
  
</feed>
